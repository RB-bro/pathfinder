const AStar = require('../dist/astar.js');

let start = {
    name: 'start',
    weight: 0,
    isGoal: false,
    edges: [] };

let pathA1 = {
    name: 'A1',
    weight: 2,
    isGoal: false,
    edges: [] };

let pathA2 = {
    name: 'A2',
    weight: 10,
    isGoal: false,
    edges: [] };

let pathA3 = {
    name: 'A3',
    weight: 1,
    isGoal: false,
    edges: [] };

let pathB1 = {
    name: 'B1',
    weight: 1,
    isGoal: false,
    edges: [] };

let pathB2 = {
    name: 'B2',
    weight: 1,
    isGoal: false,
    edges: [] };

let pathB3 = {
    name: 'B3',
    weight: 12,
    isGoal: false,
    edges: [] };

let goal = {
    name: 'goal',
    weight: 0,
    isGoal: true,
    edges: [] };

start.edges = [pathA1, pathB1];
pathA1.edges = [start, pathA2];
pathA2.edges = [pathA1, pathA3, pathB2];
pathA3.edges = [pathA2, goal];
pathB1.edges = [start, pathB2];
pathB2.edges = [pathB1, pathB3, pathA2];
pathB3.edges = [pathB2, goal];
goal.edges = [pathA3, pathB3];

const heurFn = (node, start) => 1;
const goalFn = node => node.isGoal;
const succFn = node => node.edges;
const costFn = node => node.weight;

let pathfinder = new AStar(heurFn, goalFn, succFn, costFn);

console.log(pathfinder.find(start));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvdGVzdF9hc3Rhci5qc3kiXSwibmFtZXMiOlsiQVN0YXIiLCJyZXF1aXJlIiwic3RhcnQiLCJuYW1lIiwid2VpZ2h0IiwiaXNHb2FsIiwiZWRnZXMiLCJwYXRoQTEiLCJwYXRoQTIiLCJwYXRoQTMiLCJwYXRoQjEiLCJwYXRoQjIiLCJwYXRoQjMiLCJnb2FsIiwiaGV1ckZuIiwibm9kZSIsImdvYWxGbiIsInN1Y2NGbiIsImNvc3RGbiIsInBhdGhmaW5kZXIiLCJjb25zb2xlIiwibG9nIiwiZmluZCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsUUFBVSxrQkFBVixDQUFkOztBQUVBLElBQUlDLFFBQVE7QUFDUkMsVUFBTSxPQURFO0FBRVJDLFlBQVEsQ0FGQTtBQUdSQyxZQUFRLEtBSEE7QUFJUkMsV0FBTyxFQUpDLEVBQVo7O0FBTUEsSUFBSUMsU0FBUztBQUNUSixVQUFNLElBREc7QUFFVEMsWUFBUSxDQUZDO0FBR1RDLFlBQVEsS0FIQztBQUlUQyxXQUFPLEVBSkUsRUFBYjs7QUFNQSxJQUFJRSxTQUFTO0FBQ1RMLFVBQU0sSUFERztBQUVUQyxZQUFRLEVBRkM7QUFHVEMsWUFBUSxLQUhDO0FBSVRDLFdBQU8sRUFKRSxFQUFiOztBQU1BLElBQUlHLFNBQVM7QUFDVE4sVUFBTSxJQURHO0FBRVRDLFlBQVEsQ0FGQztBQUdUQyxZQUFRLEtBSEM7QUFJVEMsV0FBTyxFQUpFLEVBQWI7O0FBTUEsSUFBSUksU0FBUztBQUNUUCxVQUFNLElBREc7QUFFVEMsWUFBUSxDQUZDO0FBR1RDLFlBQVEsS0FIQztBQUlUQyxXQUFPLEVBSkUsRUFBYjs7QUFNQSxJQUFJSyxTQUFTO0FBQ1RSLFVBQU0sSUFERztBQUVUQyxZQUFRLENBRkM7QUFHVEMsWUFBUSxLQUhDO0FBSVRDLFdBQU8sRUFKRSxFQUFiOztBQU1BLElBQUlNLFNBQVM7QUFDVFQsVUFBTSxJQURHO0FBRVRDLFlBQVEsRUFGQztBQUdUQyxZQUFRLEtBSEM7QUFJVEMsV0FBTyxFQUpFLEVBQWI7O0FBTUEsSUFBSU8sT0FBTztBQUNQVixVQUFNLE1BREM7QUFFUEMsWUFBUSxDQUZEO0FBR1BDLFlBQVEsSUFIRDtBQUlQQyxXQUFPLEVBSkEsRUFBWDs7QUFNQUosTUFBTUksS0FBTixHQUFjLENBQUVDLE1BQUYsRUFBVUcsTUFBVixDQUFkO0FBQ0FILE9BQU9ELEtBQVAsR0FBZSxDQUFFSixLQUFGLEVBQVNNLE1BQVQsQ0FBZjtBQUNBQSxPQUFPRixLQUFQLEdBQWUsQ0FBRUMsTUFBRixFQUFVRSxNQUFWLEVBQWtCRSxNQUFsQixDQUFmO0FBQ0FGLE9BQU9ILEtBQVAsR0FBZSxDQUFFRSxNQUFGLEVBQVVLLElBQVYsQ0FBZjtBQUNBSCxPQUFPSixLQUFQLEdBQWUsQ0FBRUosS0FBRixFQUFTUyxNQUFULENBQWY7QUFDQUEsT0FBT0wsS0FBUCxHQUFlLENBQUVJLE1BQUYsRUFBVUUsTUFBVixFQUFrQkosTUFBbEIsQ0FBZjtBQUNBSSxPQUFPTixLQUFQLEdBQWUsQ0FBRUssTUFBRixFQUFVRSxJQUFWLENBQWY7QUFDQUEsS0FBS1AsS0FBTCxHQUFhLENBQUVHLE1BQUYsRUFBVUcsTUFBVixDQUFiOztBQUVBLE1BQU1FLFNBQVMsQ0FBRUMsSUFBRixFQUFRYixLQUFSLEtBQW1CLENBQWxDO0FBQ0EsTUFBTWMsU0FBV0QsSUFBRixJQUFZQSxLQUFLVixNQUFoQztBQUNBLE1BQU1ZLFNBQVdGLElBQUYsSUFBWUEsS0FBS1QsS0FBaEM7QUFDQSxNQUFNWSxTQUFXSCxJQUFGLElBQVlBLEtBQUtYLE1BQWhDOztBQUVBLElBQUllLGFBQWEsSUFBSW5CLEtBQUosQ0FBWWMsTUFBWixFQUFvQkUsTUFBcEIsRUFBNEJDLE1BQTVCLEVBQW9DQyxNQUFwQyxDQUFqQjs7QUFFQUUsUUFBUUMsR0FBUixDQUFjRixXQUFXRyxJQUFYLENBQWtCcEIsS0FBbEIsQ0FBZCIsImZpbGUiOiJ0ZXN0X2FzdGFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVN0YXIgPSByZXF1aXJlIEAgJy4uL2Rpc3QvYXN0YXIuanMnXG5cbmxldCBzdGFydCA9IDo6XG4gICAgbmFtZTogJ3N0YXJ0JyxcbiAgICB3ZWlnaHQ6IDAsXG4gICAgaXNHb2FsOiBmYWxzZSxcbiAgICBlZGdlczogW11cblxubGV0IHBhdGhBMSA9IDo6XG4gICAgbmFtZTogJ0ExJyxcbiAgICB3ZWlnaHQ6IDIsXG4gICAgaXNHb2FsOiBmYWxzZSxcbiAgICBlZGdlczogW11cblxubGV0IHBhdGhBMiA9IDo6XG4gICAgbmFtZTogJ0EyJyxcbiAgICB3ZWlnaHQ6IDEwLFxuICAgIGlzR29hbDogZmFsc2UsXG4gICAgZWRnZXM6IFtdXG5cbmxldCBwYXRoQTMgPSA6OlxuICAgIG5hbWU6ICdBMycsXG4gICAgd2VpZ2h0OiAxLFxuICAgIGlzR29hbDogZmFsc2UsXG4gICAgZWRnZXM6IFtdXG5cbmxldCBwYXRoQjEgPSA6OlxuICAgIG5hbWU6ICdCMScsXG4gICAgd2VpZ2h0OiAxLFxuICAgIGlzR29hbDogZmFsc2UsXG4gICAgZWRnZXM6IFtdXG5cbmxldCBwYXRoQjIgPSA6OlxuICAgIG5hbWU6ICdCMicsXG4gICAgd2VpZ2h0OiAxLFxuICAgIGlzR29hbDogZmFsc2UsXG4gICAgZWRnZXM6IFtdXG5cbmxldCBwYXRoQjMgPSA6OlxuICAgIG5hbWU6ICdCMycsXG4gICAgd2VpZ2h0OiAxMixcbiAgICBpc0dvYWw6IGZhbHNlLFxuICAgIGVkZ2VzOiBbXVxuXG5sZXQgZ29hbCA9IDo6XG4gICAgbmFtZTogJ2dvYWwnLFxuICAgIHdlaWdodDogMCxcbiAgICBpc0dvYWw6IHRydWUsXG4gICAgZWRnZXM6IFtdXG5cbnN0YXJ0LmVkZ2VzID0gWyBwYXRoQTEsIHBhdGhCMSBdXG5wYXRoQTEuZWRnZXMgPSBbIHN0YXJ0LCBwYXRoQTIgXVxucGF0aEEyLmVkZ2VzID0gWyBwYXRoQTEsIHBhdGhBMywgcGF0aEIyIF1cbnBhdGhBMy5lZGdlcyA9IFsgcGF0aEEyLCBnb2FsIF1cbnBhdGhCMS5lZGdlcyA9IFsgc3RhcnQsIHBhdGhCMiBdXG5wYXRoQjIuZWRnZXMgPSBbIHBhdGhCMSwgcGF0aEIzLCBwYXRoQTIgXVxucGF0aEIzLmVkZ2VzID0gWyBwYXRoQjIsIGdvYWwgXVxuZ29hbC5lZGdlcyA9IFsgcGF0aEEzLCBwYXRoQjMgXVxuXG5jb25zdCBoZXVyRm4gPSAoIG5vZGUsIHN0YXJ0ICkgPT4gMVxuY29uc3QgZ29hbEZuID0gKCBub2RlICkgPT4gbm9kZS5pc0dvYWxcbmNvbnN0IHN1Y2NGbiA9ICggbm9kZSApID0+IG5vZGUuZWRnZXNcbmNvbnN0IGNvc3RGbiA9ICggbm9kZSApID0+IG5vZGUud2VpZ2h0XG5cbmxldCBwYXRoZmluZGVyID0gbmV3IEFTdGFyIEAgaGV1ckZuLCBnb2FsRm4sIHN1Y2NGbiwgY29zdEZuXG5cbmNvbnNvbGUubG9nIEAgcGF0aGZpbmRlci5maW5kIEAgc3RhcnRcbiJdfQ==