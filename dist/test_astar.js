const AStar = require('../dist/astar.js');

let start = {
    name: 'start',
    weight: 0,
    isGoal: false,
    edges: [] };

let pathA1 = {
    name: 'A1',
    weight: 2,
    isGoal: false,
    edges: [] };

let pathA2 = {
    name: 'A2',
    weight: 10,
    isGoal: false,
    edges: [] };

let pathA3 = {
    name: 'A3',
    weight: 1,
    isGoal: false,
    edges: [] };

let pathB1 = {
    name: 'B1',
    weight: 1,
    isGoal: false,
    edges: [] };

let pathB2 = {
    name: 'B2',
    weight: 1,
    isGoal: false,
    edges: [] };

let pathB3 = {
    name: 'B3',
    weight: 12,
    isGoal: false,
    edges: [] };

let goal = {
    name: 'goal',
    weight: 0,
    isGoal: true,
    edges: [] };

start.edges = [pathA1, pathB1];
pathA1.edges = [start, pathA2];
pathA2.edges = [pathA1, pathA3, pathB2];
pathA3.edges = [pathA2, goal];
pathB1.edges = [start, pathB2];
pathB2.edges = [pathB1, pathB3, pathA2];
pathB3.edges = [pathB2, goal];
goal.edges = [pathA3, pathB3];

/*
 /A1-A2-A3\
S          G
 \B1-B2-B3/
*/

const heurFn = (node, start) => 1;
const goalFn = node => node.isGoal;
const succFn = node => node.edges;
const costFn = node => node.weight;

let pathfinder = new AStar(heurFn, goalFn, succFn, costFn);

console.log(pathfinder.find(start));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvdGVzdF9hc3Rhci5qc3kiXSwibmFtZXMiOlsiQVN0YXIiLCJyZXF1aXJlIiwic3RhcnQiLCJuYW1lIiwid2VpZ2h0IiwiaXNHb2FsIiwiZWRnZXMiLCJwYXRoQTEiLCJwYXRoQTIiLCJwYXRoQTMiLCJwYXRoQjEiLCJwYXRoQjIiLCJwYXRoQjMiLCJnb2FsIiwiaGV1ckZuIiwibm9kZSIsImdvYWxGbiIsInN1Y2NGbiIsImNvc3RGbiIsInBhdGhmaW5kZXIiLCJjb25zb2xlIiwibG9nIiwiZmluZCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsUUFBVSxrQkFBVixDQUFkOztBQUVBLElBQUlDLFFBQVE7QUFDUkMsVUFBTSxPQURFO0FBRVJDLFlBQVEsQ0FGQTtBQUdSQyxZQUFRLEtBSEE7QUFJUkMsV0FBTyxFQUpDLEVBQVo7O0FBTUEsSUFBSUMsU0FBUztBQUNUSixVQUFNLElBREc7QUFFVEMsWUFBUSxDQUZDO0FBR1RDLFlBQVEsS0FIQztBQUlUQyxXQUFPLEVBSkUsRUFBYjs7QUFNQSxJQUFJRSxTQUFTO0FBQ1RMLFVBQU0sSUFERztBQUVUQyxZQUFRLEVBRkM7QUFHVEMsWUFBUSxLQUhDO0FBSVRDLFdBQU8sRUFKRSxFQUFiOztBQU1BLElBQUlHLFNBQVM7QUFDVE4sVUFBTSxJQURHO0FBRVRDLFlBQVEsQ0FGQztBQUdUQyxZQUFRLEtBSEM7QUFJVEMsV0FBTyxFQUpFLEVBQWI7O0FBTUEsSUFBSUksU0FBUztBQUNUUCxVQUFNLElBREc7QUFFVEMsWUFBUSxDQUZDO0FBR1RDLFlBQVEsS0FIQztBQUlUQyxXQUFPLEVBSkUsRUFBYjs7QUFNQSxJQUFJSyxTQUFTO0FBQ1RSLFVBQU0sSUFERztBQUVUQyxZQUFRLENBRkM7QUFHVEMsWUFBUSxLQUhDO0FBSVRDLFdBQU8sRUFKRSxFQUFiOztBQU1BLElBQUlNLFNBQVM7QUFDVFQsVUFBTSxJQURHO0FBRVRDLFlBQVEsRUFGQztBQUdUQyxZQUFRLEtBSEM7QUFJVEMsV0FBTyxFQUpFLEVBQWI7O0FBTUEsSUFBSU8sT0FBTztBQUNQVixVQUFNLE1BREM7QUFFUEMsWUFBUSxDQUZEO0FBR1BDLFlBQVEsSUFIRDtBQUlQQyxXQUFPLEVBSkEsRUFBWDs7QUFNQUosTUFBTUksS0FBTixHQUFjLENBQUVDLE1BQUYsRUFBVUcsTUFBVixDQUFkO0FBQ0FILE9BQU9ELEtBQVAsR0FBZSxDQUFFSixLQUFGLEVBQVNNLE1BQVQsQ0FBZjtBQUNBQSxPQUFPRixLQUFQLEdBQWUsQ0FBRUMsTUFBRixFQUFVRSxNQUFWLEVBQWtCRSxNQUFsQixDQUFmO0FBQ0FGLE9BQU9ILEtBQVAsR0FBZSxDQUFFRSxNQUFGLEVBQVVLLElBQVYsQ0FBZjtBQUNBSCxPQUFPSixLQUFQLEdBQWUsQ0FBRUosS0FBRixFQUFTUyxNQUFULENBQWY7QUFDQUEsT0FBT0wsS0FBUCxHQUFlLENBQUVJLE1BQUYsRUFBVUUsTUFBVixFQUFrQkosTUFBbEIsQ0FBZjtBQUNBSSxPQUFPTixLQUFQLEdBQWUsQ0FBRUssTUFBRixFQUFVRSxJQUFWLENBQWY7QUFDQUEsS0FBS1AsS0FBTCxHQUFhLENBQUVHLE1BQUYsRUFBVUcsTUFBVixDQUFiOztBQUVBOzs7Ozs7QUFNQSxNQUFNRSxTQUFTLENBQUVDLElBQUYsRUFBUWIsS0FBUixLQUFtQixDQUFsQztBQUNBLE1BQU1jLFNBQVdELElBQUYsSUFBWUEsS0FBS1YsTUFBaEM7QUFDQSxNQUFNWSxTQUFXRixJQUFGLElBQVlBLEtBQUtULEtBQWhDO0FBQ0EsTUFBTVksU0FBV0gsSUFBRixJQUFZQSxLQUFLWCxNQUFoQzs7QUFFQSxJQUFJZSxhQUFhLElBQUluQixLQUFKLENBQVljLE1BQVosRUFBb0JFLE1BQXBCLEVBQTRCQyxNQUE1QixFQUFvQ0MsTUFBcEMsQ0FBakI7O0FBRUFFLFFBQVFDLEdBQVIsQ0FBY0YsV0FBV0csSUFBWCxDQUFrQnBCLEtBQWxCLENBQWQiLCJmaWxlIjoidGVzdF9hc3Rhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFTdGFyID0gcmVxdWlyZSBAICcuLi9kaXN0L2FzdGFyLmpzJ1xuXG5sZXQgc3RhcnQgPSA6OlxuICAgIG5hbWU6ICdzdGFydCcsXG4gICAgd2VpZ2h0OiAwLFxuICAgIGlzR29hbDogZmFsc2UsXG4gICAgZWRnZXM6IFtdXG5cbmxldCBwYXRoQTEgPSA6OlxuICAgIG5hbWU6ICdBMScsXG4gICAgd2VpZ2h0OiAyLFxuICAgIGlzR29hbDogZmFsc2UsXG4gICAgZWRnZXM6IFtdXG5cbmxldCBwYXRoQTIgPSA6OlxuICAgIG5hbWU6ICdBMicsXG4gICAgd2VpZ2h0OiAxMCxcbiAgICBpc0dvYWw6IGZhbHNlLFxuICAgIGVkZ2VzOiBbXVxuXG5sZXQgcGF0aEEzID0gOjpcbiAgICBuYW1lOiAnQTMnLFxuICAgIHdlaWdodDogMSxcbiAgICBpc0dvYWw6IGZhbHNlLFxuICAgIGVkZ2VzOiBbXVxuXG5sZXQgcGF0aEIxID0gOjpcbiAgICBuYW1lOiAnQjEnLFxuICAgIHdlaWdodDogMSxcbiAgICBpc0dvYWw6IGZhbHNlLFxuICAgIGVkZ2VzOiBbXVxuXG5sZXQgcGF0aEIyID0gOjpcbiAgICBuYW1lOiAnQjInLFxuICAgIHdlaWdodDogMSxcbiAgICBpc0dvYWw6IGZhbHNlLFxuICAgIGVkZ2VzOiBbXVxuXG5sZXQgcGF0aEIzID0gOjpcbiAgICBuYW1lOiAnQjMnLFxuICAgIHdlaWdodDogMTIsXG4gICAgaXNHb2FsOiBmYWxzZSxcbiAgICBlZGdlczogW11cblxubGV0IGdvYWwgPSA6OlxuICAgIG5hbWU6ICdnb2FsJyxcbiAgICB3ZWlnaHQ6IDAsXG4gICAgaXNHb2FsOiB0cnVlLFxuICAgIGVkZ2VzOiBbXVxuXG5zdGFydC5lZGdlcyA9IFsgcGF0aEExLCBwYXRoQjEgXVxucGF0aEExLmVkZ2VzID0gWyBzdGFydCwgcGF0aEEyIF1cbnBhdGhBMi5lZGdlcyA9IFsgcGF0aEExLCBwYXRoQTMsIHBhdGhCMiBdXG5wYXRoQTMuZWRnZXMgPSBbIHBhdGhBMiwgZ29hbCBdXG5wYXRoQjEuZWRnZXMgPSBbIHN0YXJ0LCBwYXRoQjIgXVxucGF0aEIyLmVkZ2VzID0gWyBwYXRoQjEsIHBhdGhCMywgcGF0aEEyIF1cbnBhdGhCMy5lZGdlcyA9IFsgcGF0aEIyLCBnb2FsIF1cbmdvYWwuZWRnZXMgPSBbIHBhdGhBMywgcGF0aEIzIF1cblxuLypcbiAvQTEtQTItQTNcXFxuUyAgICAgICAgICBHXG4gXFxCMS1CMi1CMy9cbiovXG5cbmNvbnN0IGhldXJGbiA9ICggbm9kZSwgc3RhcnQgKSA9PiAxXG5jb25zdCBnb2FsRm4gPSAoIG5vZGUgKSA9PiBub2RlLmlzR29hbFxuY29uc3Qgc3VjY0ZuID0gKCBub2RlICkgPT4gbm9kZS5lZGdlc1xuY29uc3QgY29zdEZuID0gKCBub2RlICkgPT4gbm9kZS53ZWlnaHRcblxubGV0IHBhdGhmaW5kZXIgPSBuZXcgQVN0YXIgQCBoZXVyRm4sIGdvYWxGbiwgc3VjY0ZuLCBjb3N0Rm5cblxuY29uc29sZS5sb2cgQCBwYXRoZmluZGVyLmZpbmQgQCBzdGFydFxuIl19