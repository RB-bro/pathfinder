class Heap {
  constructor(scoreFn, compareFn) {
    this.contents = [];
    this.scoreFn = scoreFn !== undefined ? scoreFn : x => x;
    this.compareFn = compareFn !== undefined ? compareFn : (a, b) => a < b;
  }

  toString() {
    return this.contents;
  }

  size() {
    return this.contents.length;
  }

  contains(item) {
    return this.contents.indexOf(item) >= 0;
  }

  peek() {
    return this.contents[0];
  }

  push(nodes) {
    if (!Array.isArray(nodes)) {
      nodes = [nodes];
    }
    nodes.forEach(node => {
      this.contents.push(node);
      this.bubbleUp(this.size() - 1);
    });
    return nodes;
  }

  pop() {
    let result = this.contents[0];
    let end = this.contents.pop();

    if (this.size() > 0) {
      this.contents[0] = end;
      this.sinkDown(0);
    }

    return result;
  }

  swap(a, b) {
    const t = this.contents[a];
    this.contents[a] = this.contents[b];
    this.contents[b] = t;
    return a;
  }

  getIndexScore(index) {
    return this.scoreFn(this.contents[index]);
  }

  getParentIndex(index) {
    return Math.floor((index - 1) / 2);
  }

  bubbleUp(index) {
    if (index > 0) {
      const parentIndex = this.getParentIndex(index);
      if (this.compareFn(this.getIndexScore(index), this.getIndexScore(parentIndex))) {
        this.bubbleUp(this.swap(parentIndex, index));
      }
    }
  }

  sinkDown(parentIndex) {
    if (parentIndex < this.size()) {
      const parentScore = this.getIndexScore(parentIndex);
      const leftIndex = parentIndex * 2 + 1;
      const rightIndex = parentIndex * 2 + 2;
      var swapIdx;

      if (leftIndex < this.size()) {
        const leftIndexScore = this.getIndexScore(leftIndex);
        if (this.compareFn(leftIndexScore, parentScore)) {
          swapIdx = leftIndex;
        }
      }

      if (rightIndex < this.size()) {
        const rightIndexScore = this.getIndexScore(rightIndex);
        if (this.compareFn(rightIndexScore, swapIdx !== undefined ? leftIndexScore : parentScore)) {
          swapIdx = rightIndex;
        }
      }

      if (swapIdx !== undefined) {
        this.sinkDown(this.swap(swapIdx, parentIndex));
      }
    }
  }
}

module.exports = Heap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvaGVhcC5qc3kiXSwibmFtZXMiOlsiSGVhcCIsImNvbnN0cnVjdG9yIiwic2NvcmVGbiIsImNvbXBhcmVGbiIsImNvbnRlbnRzIiwidW5kZWZpbmVkIiwieCIsImEiLCJiIiwidG9TdHJpbmciLCJzaXplIiwibGVuZ3RoIiwiY29udGFpbnMiLCJpdGVtIiwiaW5kZXhPZiIsInBlZWsiLCJwdXNoIiwibm9kZXMiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwibm9kZSIsImJ1YmJsZVVwIiwicG9wIiwicmVzdWx0IiwiZW5kIiwic2lua0Rvd24iLCJzd2FwIiwidCIsImdldEluZGV4U2NvcmUiLCJpbmRleCIsImdldFBhcmVudEluZGV4IiwiTWF0aCIsImZsb29yIiwicGFyZW50SW5kZXgiLCJwYXJlbnRTY29yZSIsImxlZnRJbmRleCIsInJpZ2h0SW5kZXgiLCJzd2FwSWR4IiwibGVmdEluZGV4U2NvcmUiLCJyaWdodEluZGV4U2NvcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFOLENBQVc7QUFDVEMsY0FBYUMsT0FBYixFQUFzQkMsU0FBdEIsRUFBa0M7QUFDaEMsU0FBS0MsUUFBTCxHQUFnQixFQUFoQjtBQUNBLFNBQUtGLE9BQUwsR0FBZUEsWUFBWUcsU0FBWixHQUF3QkgsT0FBeEIsR0FBb0NJLENBQUYsSUFBU0EsQ0FBMUQ7QUFDQSxTQUFLSCxTQUFMLEdBQWlCQSxjQUFjRSxTQUFkLEdBQTBCRixTQUExQixHQUFzQyxDQUFFSSxDQUFGLEVBQUtDLENBQUwsS0FBWUQsSUFBSUMsQ0FBdkU7QUFBd0U7O0FBRTFFQyxhQUFXO0FBQUcsV0FBTyxLQUFLTCxRQUFaO0FBQW9COztBQUVsQ00sU0FBTztBQUFHLFdBQU8sS0FBS04sUUFBTCxDQUFjTyxNQUFyQjtBQUEyQjs7QUFFckNDLFdBQVVDLElBQVYsRUFBaUI7QUFBRyxXQUFPLEtBQUtULFFBQUwsQ0FBY1UsT0FBZCxDQUF1QkQsSUFBdkIs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V0FBN0UsQ0FBSCxFQUFnRztBQUM5Rkcsb0JBQVVELFVBQVY7QUFBb0I7QUFBQTs7QUFFeEIsVUFBR0MsWUFBWWpDLFNBQWYsRUFBMkI7QUFDekIsYUFBS3FCLFFBQUwsQ0FBZ0IsS0FBS0MsSUFBTCxDQUFZVyxPQUFaLEVBQXFCSixXQUFyQixDQUFoQjtBQUFnRDtBQUFBO0FBQUE7QUFqRS9DOztBQW9FWE8sT0FBT0MsT0FBUCxHQUFpQjFDLElBQWpCIiwiZmlsZSI6ImhlYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBIZWFwIDo6XG4gIGNvbnN0cnVjdG9yKCBzY29yZUZuLCBjb21wYXJlRm4gKSA6OlxuICAgIHRoaXMuY29udGVudHMgPSBbXVxuICAgIHRoaXMuc2NvcmVGbiA9IHNjb3JlRm4gIT09IHVuZGVmaW5lZCA/IHNjb3JlRm4gOiAoIHggKSA9PiB4XG4gICAgdGhpcy5jb21wYXJlRm4gPSBjb21wYXJlRm4gIT09IHVuZGVmaW5lZCA/IGNvbXBhcmVGbiA6ICggYSwgYiApID0+IGEgPCBiXG5cbiAgdG9TdHJpbmcoKSA6OiByZXR1cm4gdGhpcy5jb250ZW50c1xuXG4gIHNpemUoKSA6OiByZXR1cm4gdGhpcy5jb250ZW50cy5sZW5ndGhcblxuICBjb250YWlucyggaXRlbSApIDo6IHJldHVybiB0aGlzLmNvbnRlbnRzLmluZGV4T2YoIGl0ZW0gKSA+PSAwXG5cbiAgcGVlaygpIDo6IHJldHVybiB0aGlzLmNvbnRlbnRzWzBdXG5cbiAgcHVzaCggbm9kZXMgKSA6OlxuICAgIGlmICFBcnJheS5pc0FycmF5KG5vZGVzKSA6OiBub2RlcyA9IFsgbm9kZXMgXVxuICAgIG5vZGVzLmZvckVhY2ggQCAoIG5vZGUgKSA9PiA6OlxuICAgICAgdGhpcy5jb250ZW50cy5wdXNoIEAgbm9kZVxuICAgICAgdGhpcy5idWJibGVVcCBAIHRoaXMuc2l6ZSgpIC0gMVxuICAgIHJldHVybiBub2Rlc1xuXG4gIHBvcCgpIDo6XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuY29udGVudHNbMF1cbiAgICBsZXQgZW5kID0gdGhpcy5jb250ZW50cy5wb3AoKVxuXG4gICAgaWYgdGhpcy5zaXplKCkgPiAwIDo6XG4gICAgICB0aGlzLmNvbnRlbnRzWzBdID0gZW5kXG4gICAgICB0aGlzLnNpbmtEb3duIEAgMFxuXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gIHN3YXAoIGEsIGIgKSA6OlxuICAgIGNvbnN0IHQgPSB0aGlzLmNvbnRlbnRzW2FdXG4gICAgdGhpcy5jb250ZW50c1thXSA9IHRoaXMuY29udGVudHNbYl1cbiAgICB0aGlzLmNvbnRlbnRzW2JdID0gdFxuICAgIHJldHVybiBhXG5cbiAgZ2V0SW5kZXhTY29yZSggaW5kZXggKSA6OiByZXR1cm4gdGhpcy5zY29yZUZuIEAgdGhpcy5jb250ZW50c1tpbmRleF1cblxuICBnZXRQYXJlbnRJbmRleCggaW5kZXggKSA6OiByZXR1cm4gTWF0aC5mbG9vciBAIChpbmRleCAtIDEpIC8gMlxuXG4gIGJ1YmJsZVVwKCBpbmRleCApIDo6XG4gICAgaWYgaW5kZXggPiAwIDo6XG4gICAgICAgIGNvbnN0IHBhcmVudEluZGV4ID0gdGhpcy5nZXRQYXJlbnRJbmRleCBAIGluZGV4XG4gICAgICAgIGlmIHRoaXMuY29tcGFyZUZuIEAgdGhpcy5nZXRJbmRleFNjb3JlKCBpbmRleCApLCB0aGlzLmdldEluZGV4U2NvcmUoIHBhcmVudEluZGV4ICkgOjpcbiAgICAgICAgICB0aGlzLmJ1YmJsZVVwIEAgdGhpcy5zd2FwIEAgcGFyZW50SW5kZXgsIGluZGV4XG5cbiAgc2lua0Rvd24oIHBhcmVudEluZGV4ICkgOjpcbiAgICBpZiBwYXJlbnRJbmRleCA8IHRoaXMuc2l6ZSgpIDo6XG4gICAgICAgIGNvbnN0IHBhcmVudFNjb3JlID0gdGhpcy5nZXRJbmRleFNjb3JlIEAgcGFyZW50SW5kZXhcbiAgICAgICAgY29uc3QgbGVmdEluZGV4ID0gcGFyZW50SW5kZXggKiAyICsgMVxuICAgICAgICBjb25zdCByaWdodEluZGV4ID0gcGFyZW50SW5kZXggKiAyICsgMlxuICAgICAgICB2YXIgc3dhcElkeFxuXG4gICAgICAgIGlmIGxlZnRJbmRleCA8IHRoaXMuc2l6ZSgpIDo6XG4gICAgICAgICAgY29uc3QgbGVmdEluZGV4U2NvcmUgPSB0aGlzLmdldEluZGV4U2NvcmUgQCBsZWZ0SW5kZXhcbiAgICAgICAgICBpZiB0aGlzLmNvbXBhcmVGbiBAIGxlZnRJbmRleFNjb3JlLCBwYXJlbnRTY29yZSA6OlxuICAgICAgICAgICAgc3dhcElkeCA9IGxlZnRJbmRleFxuICAgICAgICBcbiAgICAgICAgaWYgcmlnaHRJbmRleCA8IHRoaXMuc2l6ZSgpIDo6XG4gICAgICAgICAgY29uc3QgcmlnaHRJbmRleFNjb3JlID0gdGhpcy5nZXRJbmRleFNjb3JlIEAgcmlnaHRJbmRleFxuICAgICAgICAgIGlmIHRoaXMuY29tcGFyZUZuIEAgcmlnaHRJbmRleFNjb3JlLCAoIHN3YXBJZHggIT09IHVuZGVmaW5lZCA/IGxlZnRJbmRleFNjb3JlIDogcGFyZW50U2NvcmUgKSA6OlxuICAgICAgICAgICAgc3dhcElkeCA9IHJpZ2h0SW5kZXhcblxuICAgICAgICBpZiBzd2FwSWR4ICE9PSB1bmRlZmluZWQgOjpcbiAgICAgICAgICB0aGlzLnNpbmtEb3duIEAgdGhpcy5zd2FwIEAgc3dhcElkeCwgcGFyZW50SW5kZXhcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEhlYXBcbiJdfQ==