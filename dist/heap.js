class Heap {
  constructor(scoreFn, compareFn) {
    this.contents = [];
    this.scoreFn = scoreFn !== undefined ? scoreFn : x => x;
    this.compareFn = compareFn !== undefined ? compareFn : (a, b) => a < b;
  }

  toString() {
    return this.contents;
  }

  size() {
    return this.contents.length;
  }

  contains(item) {
    return this.contents.indexOf(item) >= 0;
  }

  push(nodes) {
    if (!Array.isArray(nodes)) {
      nodes = [nodes];
    }
    nodes.forEach(node => {
      this.contents.push(node);
      this.bubbleUp(this.size() - 1);
    });
    return nodes;
  }

  pop() {
    let result = this.contents[0];
    let end = this.contents.pop();

    if (this.size() > 0) {
      this.contents[0] = end;
      this.sinkDown(0);
    }

    return result;
  }

  swap(a, b) {
    const t = this.contents[a];
    this.contents[a] = this.contents[b];
    this.contents[b] = t;
    return a;
  }

  getIndexScore(index) {
    return this.scoreFn(this.contents[index]);
  }

  getParentIndex(index) {
    return Math.floor((index - 1) / 2);
  }

  bubbleUp(index) {
    if (index > 0) {
      const parentIndex = this.getParentIndex(index);
      if (this.compareFn(this.getIndexScore(index), this.getIndexScore(parentIndex))) {
        this.bubbleUp(this.swap(parentIndex, index));
      }
    }
  }

  sinkDown(parentIndex) {
    if (parentIndex < this.size()) {
      const parentScore = this.getIndexScore(parentIndex);
      const leftIndex = parentIndex * 2 + 1;
      const rightIndex = parentIndex * 2 + 2;
      var swapIdx;

      if (leftIndex < this.size()) {
        const leftIndexScore = this.getIndexScore(leftIndex);
        if (this.compareFn(leftIndexScore, parentScore)) {
          swapIdx = leftIndex;
        }
      }

      if (rightIndex < this.size()) {
        const rightIndexScore = this.getIndexScore(rightIndex);
        if (this.compareFn(rightIndexScore, swapIdx !== undefined ? leftIndexScore : parentScore)) {
          swapIdx = rightIndex;
        }
      }

      if (swapIdx !== undefined) {
        this.sinkDown(this.swap(swapIdx, parentIndex));
      }
    }
  }
}

module.exports = Heap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvaGVhcC5qc3kiXSwibmFtZXMiOlsiSGVhcCIsImNvbnN0cnVjdG9yIiwic2NvcmVGbiIsImNvbXBhcmVGbiIsImNvbnRlbnRzIiwidW5kZWZpbmVkIiwieCIsImEiLCJiIiwidG9TdHJpbmciLCJzaXplIiwibGVuZ3RoIiwiY29udGFpbnMiLCJpdGVtIiwiaW5kZXhPZiIsInB1c2giLCJub2RlcyIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJub2RlIiwiYnViYmxlVXAiLCJwb3AiLCJyZXN1bHQiLCJlbmQiLCJzaW5rRG93biIsInN3YXAiLCJ0IiwiZ2V0SW5kZXhTY29yZSIsImluZGV4IiwiZ2V0UGFyZW50SW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJwYXJlbnRJbmRleCIsInBhcmVudFNjb3JlIiwibGVmdEluZGV4IiwicmlnaHRJbmRleCIsInN3YXBJZHgiLCJsZWZ0SW5kZXhTY29yZSIsInJpZ2h0SW5kZXhTY29yZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQU4sQ0FBVztBQUNUQyxjQUFhQyxPQUFiLEVBQXNCQyxTQUF0QixFQUFrQztBQUNoQyxTQUFLQyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0EsU0FBS0YsT0FBTCxHQUFlQSxZQUFZRyxTQUFaLEdBQXdCSCxPQUF4QixHQUFvQ0ksQ0FBRixJQUFTQSxDQUExRDtBQUNBLFNBQUtILFNBQUwsR0FBaUJBLGNBQWNFLFNBQWQsR0FBMEJGLFNBQTFCLEdBQXNDLENBQUVJLENBQUYsRUFBS0MsQ0FBTCxLQUFZRCxJQUFJQyxDQUF2RTtBQUF3RTs7QUFFMUVDLGFBQVc7QUFBRyxXQUFPLEtBQUtMLFFBQVo7QUFBb0I7O0FBRWxDTSxTQUFPO0FBQUcsV0FBTyxLQUFLTixRQUFMLENBQWNPLE1BQXJCO0FBQTJCOztBQUVyQ0MsV0FBVUMsSUFBVixFQUFpQjtBQUFHLFdBQU8sS0FBS1QsUUFBTCxDQUFjVSxPQUFkLENBQXVCRCxJQUF2QixLQUFpQyxD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QVloQyxTQUFmLEVBQTJCO0FBQ3pCLGFBQUtvQixRQUFMLENBQWdCLEtBQUtDLElBQUwsQ0FBWVcsT0FBWixFQUFxQkosV0FBckIsQ0FBaEI7QUFBZ0Q7QUFBQTtBQUFBO0FBL0QvQzs7QUFrRVhPLE9BQU9DLE9BQVAsR0FBaUJ6QyxJQUFqQiIsImZpbGUiOiJoZWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSGVhcCA6OlxuICBjb25zdHJ1Y3Rvciggc2NvcmVGbiwgY29tcGFyZUZuICkgOjpcbiAgICB0aGlzLmNvbnRlbnRzID0gW11cbiAgICB0aGlzLnNjb3JlRm4gPSBzY29yZUZuICE9PSB1bmRlZmluZWQgPyBzY29yZUZuIDogKCB4ICkgPT4geFxuICAgIHRoaXMuY29tcGFyZUZuID0gY29tcGFyZUZuICE9PSB1bmRlZmluZWQgPyBjb21wYXJlRm4gOiAoIGEsIGIgKSA9PiBhIDwgYlxuXG4gIHRvU3RyaW5nKCkgOjogcmV0dXJuIHRoaXMuY29udGVudHNcblxuICBzaXplKCkgOjogcmV0dXJuIHRoaXMuY29udGVudHMubGVuZ3RoXG5cbiAgY29udGFpbnMoIGl0ZW0gKSA6OiByZXR1cm4gdGhpcy5jb250ZW50cy5pbmRleE9mKCBpdGVtICkgPj0gMFxuXG4gIHB1c2goIG5vZGVzICkgOjpcbiAgICBpZiAhQXJyYXkuaXNBcnJheShub2RlcykgOjogbm9kZXMgPSBbIG5vZGVzIF1cbiAgICBub2Rlcy5mb3JFYWNoIEAgKCBub2RlICkgPT4gOjpcbiAgICAgIHRoaXMuY29udGVudHMucHVzaCBAIG5vZGVcbiAgICAgIHRoaXMuYnViYmxlVXAgQCB0aGlzLnNpemUoKSAtIDFcbiAgICByZXR1cm4gbm9kZXNcblxuICBwb3AoKSA6OlxuICAgIGxldCByZXN1bHQgPSB0aGlzLmNvbnRlbnRzWzBdXG4gICAgbGV0IGVuZCA9IHRoaXMuY29udGVudHMucG9wKClcblxuICAgIGlmIHRoaXMuc2l6ZSgpID4gMCA6OlxuICAgICAgdGhpcy5jb250ZW50c1swXSA9IGVuZFxuICAgICAgdGhpcy5zaW5rRG93biBAIDBcblxuICAgIHJldHVybiByZXN1bHRcblxuICBzd2FwKCBhLCBiICkgOjpcbiAgICBjb25zdCB0ID0gdGhpcy5jb250ZW50c1thXVxuICAgIHRoaXMuY29udGVudHNbYV0gPSB0aGlzLmNvbnRlbnRzW2JdXG4gICAgdGhpcy5jb250ZW50c1tiXSA9IHRcbiAgICByZXR1cm4gYVxuXG4gIGdldEluZGV4U2NvcmUoIGluZGV4ICkgOjogcmV0dXJuIHRoaXMuc2NvcmVGbiBAIHRoaXMuY29udGVudHNbaW5kZXhdXG5cbiAgZ2V0UGFyZW50SW5kZXgoIGluZGV4ICkgOjogcmV0dXJuIE1hdGguZmxvb3IgQCAoaW5kZXggLSAxKSAvIDJcblxuICBidWJibGVVcCggaW5kZXggKSA6OlxuICAgIGlmIGluZGV4ID4gMCA6OlxuICAgICAgICBjb25zdCBwYXJlbnRJbmRleCA9IHRoaXMuZ2V0UGFyZW50SW5kZXggQCBpbmRleFxuICAgICAgICBpZiB0aGlzLmNvbXBhcmVGbiBAIHRoaXMuZ2V0SW5kZXhTY29yZSggaW5kZXggKSwgdGhpcy5nZXRJbmRleFNjb3JlKCBwYXJlbnRJbmRleCApIDo6XG4gICAgICAgICAgdGhpcy5idWJibGVVcCBAIHRoaXMuc3dhcCBAIHBhcmVudEluZGV4LCBpbmRleFxuXG4gIHNpbmtEb3duKCBwYXJlbnRJbmRleCApIDo6XG4gICAgaWYgcGFyZW50SW5kZXggPCB0aGlzLnNpemUoKSA6OlxuICAgICAgICBjb25zdCBwYXJlbnRTY29yZSA9IHRoaXMuZ2V0SW5kZXhTY29yZSBAIHBhcmVudEluZGV4XG4gICAgICAgIGNvbnN0IGxlZnRJbmRleCA9IHBhcmVudEluZGV4ICogMiArIDFcbiAgICAgICAgY29uc3QgcmlnaHRJbmRleCA9IHBhcmVudEluZGV4ICogMiArIDJcbiAgICAgICAgdmFyIHN3YXBJZHhcblxuICAgICAgICBpZiBsZWZ0SW5kZXggPCB0aGlzLnNpemUoKSA6OlxuICAgICAgICAgIGNvbnN0IGxlZnRJbmRleFNjb3JlID0gdGhpcy5nZXRJbmRleFNjb3JlIEAgbGVmdEluZGV4XG4gICAgICAgICAgaWYgdGhpcy5jb21wYXJlRm4gQCBsZWZ0SW5kZXhTY29yZSwgcGFyZW50U2NvcmUgOjpcbiAgICAgICAgICAgIHN3YXBJZHggPSBsZWZ0SW5kZXhcbiAgICAgICAgXG4gICAgICAgIGlmIHJpZ2h0SW5kZXggPCB0aGlzLnNpemUoKSA6OlxuICAgICAgICAgIGNvbnN0IHJpZ2h0SW5kZXhTY29yZSA9IHRoaXMuZ2V0SW5kZXhTY29yZSBAIHJpZ2h0SW5kZXhcbiAgICAgICAgICBpZiB0aGlzLmNvbXBhcmVGbiBAIHJpZ2h0SW5kZXhTY29yZSwgKCBzd2FwSWR4ICE9PSB1bmRlZmluZWQgPyBsZWZ0SW5kZXhTY29yZSA6IHBhcmVudFNjb3JlICkgOjpcbiAgICAgICAgICAgIHN3YXBJZHggPSByaWdodEluZGV4XG5cbiAgICAgICAgaWYgc3dhcElkeCAhPT0gdW5kZWZpbmVkIDo6XG4gICAgICAgICAgdGhpcy5zaW5rRG93biBAIHRoaXMuc3dhcCBAIHN3YXBJZHgsIHBhcmVudEluZGV4XG5cblxubW9kdWxlLmV4cG9ydHMgPSBIZWFwXG4iXX0=